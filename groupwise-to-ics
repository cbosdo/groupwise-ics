#!/usr/bin/env python

# groupwise-ics: synchronize GroupWise calendar to ICS file and back
# Copyright (C) 2013  Cedric Bosdonnat <cedric@bosdonnat.fr>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import optparse
import sys
import os
import os.path
from connection import GWConnection

def main(args):
    usage_str = 'usage: %prog [options]'
    parser = optparse.OptionParser(usage = usage_str)

    parser.add_option('--gw-imap', dest = 'server',
                      default = None,
                      help = 'GroupWise IMAP server address. The server'
                             'is expected to accept SSL connections')
    parser.add_option('--gw-login', dest = 'login',
                      default = None,
                      help = 'Login on the GroupWise server')
    parser.add_option('--gw-pass', dest = 'passwd',
                      default = None,
                      help = 'Password on the GroupWise server')
    parser.add_option('--gw-mailbox', dest = 'mailbox',
                      default = 'Calendar',
                      help = 'Mailbox containing the calendar events to drop'
                             'as iCalendar file. (default: Calendar)')
    parser.add_option('--ics', dest='ics',
                      default=None,
                      metavar="FILE",
                      help='iCalendar file that will be created '
                           '(if not used, will output ics to stdout)')

    (options, args) = parser.parse_args()

    if options.server is None:
        parser.error('--gw-imap is required')
    
    if options.login is None:
        parser.error('--gw-login is required')
    
    if options.passwd is None:
        parser.error('--gw-pass is required')

    # TODO More error handling
    cnx = GWConnection(options.server)
    cnx.connect(options.login, options.passwd, options.mailbox)
    ics = options.ics
    if ics is not None and not ics.startswith('/'):
        ics = os.path.join(os.getcwd(), ics)
    cnx.dump(ics)

    return 0

if __name__ == "__main__":
    ret = main(sys.argv)
    sys.exit(ret)
