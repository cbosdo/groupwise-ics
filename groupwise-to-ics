#!/usr/bin/env python

# groupwise-ics: synchronize GroupWise calendar to ICS file and back
# Copyright (C) 2013  Cedric Bosdonnat <cedric@bosdonnat.fr>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import imaplib
import email
import optparse
import sys
from cal import Calendar, Event
from datetime import datetime

class IMAPConnection:
    def __init__(self, server):
        self.conn = imaplib.IMAP4_SSL(server)

    def connect(self, login, passwd, mailbox):
        self.conn.login(login, passwd)
        self.conn.select(mailbox)

    def get_mails_ids(self):
        err, ids = self.conn.search(None, '(ALL)')
        return ids[0].split()
    
    @staticmethod
    def get_ical_from_multipart(mail):
        event = None
        if mail.is_multipart():
            for part in mail.get_payload():
                if part.is_multipart():
                    event = get_ical_from_multipart(part)
                else:
                    if part.get_content_type().startswith('text/calendar'):
                        # We got the ical part of the multipart!
                        event = part.get_payload()
        elif mail.get_content_type().startswith('text/calendar'):
            event = mail.get_payload()
        return event


    def get_event(self, mail_id):
        # TODO Caching the events would be needed,
        # though we still need to find a way to get changed appointments
        err, data = self.conn.fetch(mail_id, '(RFC822)')
        mail = email.message_from_string(data[0][1])
        ical = self.get_ical_from_multipart(mail)
        calendar = Calendar(ical)
        event = None
        if len(calendar.events) > 0:
            event = calendar.events[0]
        return event

    def dump(self, path):
        events = {}
        ids = self.get_mails_ids( );
        for mail_id in ids:
            event = self.get_event(mail_id)
            dtstamp = datetime.strptime(event.dtstamp, '%Y%m%dT%H%M%SZ')
            uid = event.uid
            if event.gwrecordid is not None:
                uid = event.gwrecordid

            if uid is not None:
                if uid in events and \
                        datetime.strptime(events[uid].dtstamp, '%Y%m%dT%H%M%SZ') <= dtstamp:
                    events[uid] = event
                elif uid not in events:
                    events[uid] = event

        if path is not None:
            expanded_path = os.path.expanduser(os.path.expandvars(path))
            if not os.path.isdir(os.path.dirname(expanded_path)):
                os.makedirs(os.path.dirname(expanded_path))
            fp = open(expanded_path, 'w')
        else:
            fp = sys.stdout

        fp.write('BEGIN:VCALENDAR\r\n')
        fp.write('PRODID:-//SUSE Hackweek//NONSGML groupwise-to-ics//EN\r\n')
        fp.write('VERSION:2.0\r\n')

        for eventid in events:
            event = events[eventid]
            fp.write(event.to_ical())

        fp.write('END:VCALENDAR\r\n')
        if path is not None:
            fp.close()


def main(args):
    usage_str = 'usage: %prog [options]'
    parser = optparse.OptionParser(usage = usage_str)

    parser.add_option('--gw-imap', dest = 'server',
                      default = None,
                      help = 'GroupWise IMAP server address. The server'
                             'is expected to accept SSL connections')
    parser.add_option('--gw-login', dest = 'login',
                      default = None,
                      help = 'Login on the GroupWise server')
    parser.add_option('--gw-pass', dest = 'passwd',
                      default = None,
                      help = 'Password on the GroupWise server')
    parser.add_option('--gw-mailbox', dest = 'mailbox',
                      default = 'Calendar',
                      help = 'Mailbox containing the calendar events to drop'
                             'as iCalendar file. (default: Calendar)')
    parser.add_option('--ics', dest='ics',
                      default=None,
                      metavar="FILE",
                      help='iCalendar file that will be created '
                           '(if not used, will output ics to stdout)')

    (options, args) = parser.parse_args()

    if options.server is None:
        parser.error('--gw-imap is required')
    
    if options.login is None:
        parser.error('--gw-login is required')
    
    if options.passwd is None:
        parser.error('--gw-pass is required')

    # TODO More error handling
    cnx = IMAPConnection(options.server)
    cnx.connect(options.login, options.passwd, options.mailbox )
    cnx.dump( options.ics )

    return 0

if __name__ == "__main__":
    ret = main(sys.argv)
    sys.exit(ret)
