#!/usr/bin/env python

# groupwise-ics: synchronize GroupWise calendar to ICS file and back
# Copyright (C) 2013  Cedric Bosdonnat <cedric@bosdonnat.fr>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import optparse
import sys
import os
import os.path
from connection import GWConnection

def get_path(path):
    newpath = path
    if path is not None and not path.startswith('/'):
        newpath = os.path.join(os.getcwd(), path)
        new_path = os.path.expanduser(os.path.expandvars(newpath))
    return newpath

def main(args):
    usage_str = 'usage: %prog [options]'
    parser = optparse.OptionParser(usage = usage_str)

    parser.add_option('--config', dest='config',
                      default=None,
                      metavar="FILE",
                      help='Configuration file for the GroupWise connection details')
    parser.add_option('--gw-mailbox', dest = 'mailbox',
                      default = 'Calendar',
                      help = 'Mailbox containing the calendar events to drop'
                             'as iCalendar file. (default: Calendar)')
    parser.add_option('--ics', dest='ics',
                      default=None,
                      metavar="FILE",
                      help='iCalendar file that will be created '
                           '(if not used, will output ics to stdout)')

    (options, args) = parser.parse_args()

    if options.config is None:
        parser.error('--gw-config is required')
 
    config = {}
    execfile(get_path(options.config), {}, config)

    if config['gw']['imap'] is None:
        parser.error('Configuration file need to define gw.imap')
    if config['gw']['login'] is None:
        parser.error('Configuration file need to define gw.login')
    if config['gw']['password'] is None:
        parser.error('Configuration file need to define gw.password')

    # TODO More error handling
    cnx = GWConnection(config['gw']['imap'])
    cnx.connect(config['gw']['login'], config['gw']['password'], options.mailbox)
    ics = get_path(options.ics)
    cnx.dump(ics)

    return 0

if __name__ == "__main__":
    ret = main(sys.argv)
    sys.exit(ret)
